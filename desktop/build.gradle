apply plugin: "java"
java.targetCompatibility = JavaVersion.VERSION_1_8

sourceCompatibility = 1.8
// Desktop-only build: assets are in ../android/assets
sourceSets.main.java.srcDirs = [ "src/" ]
sourceSets.main.resources.srcDirs = [ "../android/assets" ]

project.ext.mainClassName = "de.dakror.quarry.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../android/assets")

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compileClasspath.collect {it.isDirectory() ? it : zipTree(it)}}
    //from files(project.assetsDir)
 
    manifest {
        attributes(
       		'Main-Class': project.mainClassName,
            'Premain-Class':           'de.dakror.modding.stub.StubAgent',
            'Agent-Class':             'de.dakror.modding.stub.StubAgent',
            'Launcher-Agent-Class':    'de.dakror.modding.stub.StubAgent',
            'Can-Redefine-Classes':    'true',
            'Can-Retransform-Classes': 'true',
        )
    }
}

dist.dependsOn classes

compileJava {
    options.release = 8
}
eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ])
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}